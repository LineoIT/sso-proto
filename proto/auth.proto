syntax = "proto3";

package sso;

option go_package = "github.com/LineoIT/sso-proto-lite-go";
option java_package = "ci.lineo.sso";
option java_outer_classname = "AuthProto";
option java_multiple_files = true;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";


option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Single Sign-on API";
    version: "1.0.0";
    contact: {
      name: "LineoIT";
      url: "https://lineo.ci/docs/sso";
      email: "ckam225@gmail.com";
    };
  };
};

service AuthService {
  rpc Register (RegisterSchema) returns (TimeoutSchema) {
    option (google.api.http) = {
      post: "/v1/signup"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to create a new user";
      summary: "Create new user";
    };
  }

  rpc GetCurrentUser (google.protobuf.Empty) returns (User) {
    option (google.api.http) = {
      get: "/v1/me"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to get current user";
      summary: "Get current user";
    };
  }
  rpc UpdateUser (UpdateUserSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/me"
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to update user";
      summary: "Update current user";
    };
  }

  rpc ForgotPassword (EmailSchema) returns (TimeoutSchema) {
    option (google.api.http) = {
      post: "/v1/password/forgot"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to recovery password when user has forgotten.";
      summary: "Forgot password";
    };
  }
  rpc ConfirmResetPassword (EmailCodeSchema) returns (AccessToken) {
    option (google.api.http) = {
      post: "/v1/password/reset/confirm"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to confirm reset password code";
      summary: "Confirm reset password code";
    };
  }
  rpc ResetPassword (PasswordSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/password/reset"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to change password if permitted";
      summary: "Reset password";
    };
  }
  rpc CheckPassword (PasswordSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/password/check"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this endpoint to check current user password";
      summary: "Check current user password";
    };
  }
  rpc ChangePassword (PasswordSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/password/change"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to change current user password if permitted";
      summary: "Change current user password";
    };
  }

  rpc CheckEmail (EmailSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/email/check"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to verify if email exists";
      summary: "Verify existing email";
    };
  }
  rpc ConfirmEmail (EmailCodeSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/email/confirm"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to confirm email address after registration";
      summary: "Confirmation email";
    };
  }
  rpc EmailLogin (EmailPasswordSchema) returns (AccessToken) {
    option (google.api.http) = {
      post: "/v1/email/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to sign in using email address";
      summary: "Sign in using email";
    };
  }
  rpc SendEmailConfirmation (EmailMailSchema) returns (TimeoutSchema) {
    option (google.api.http) = {
      post: "/v1/email/confirm/mail"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to send email confirmation code";
      summary: "Send Email Confirmation";
    };
  }

  rpc PhoneLogin (PhoneCodeSchema) returns (AccessToken) {
    option (google.api.http) = {
      post: "/v1/phone/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to sign in using phone number";
      summary: "Sign in using phone number";
    };
  }
  rpc CheckPhoneNumber (PhoneSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/phone/check"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to verify if phone number exists";
      summary: "Verify existing phone number";
    };
  }
  rpc ConfirmPhoneNumber (PhoneCodeSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/phone/confirm"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to confirm phone number after registration";
      summary: "Confirmation phone number";
    };
  }
  rpc SendSMSConfirmation (PhoneSMSSchema) returns (TimeoutSchema) {
    option (google.api.http) = {
      post: "/v1/phone/confirm/sms"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to send sms confirmation code";
      summary: "Send sms confirmation";
    };
  }

  rpc LogOut (LogoutSchema) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/v1/logout",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to sign out";
      summary: "Log out";
    };
  }
  rpc DeactivateAccount (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      get: "/v1/deactivate"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to deactivate current user account";
      summary: "Deactivate current user account";
    };
  }
  rpc DeleteAccount (google.protobuf.Empty) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete: "/v1/me"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Use this API to delete account";
      summary: "Delete current user account";
    };
  }
}

message User {
  string id = 1;
  string lastname = 2;
  string firstname = 3;
  string email = 4;
  string phone = 5;
  string scope = 6;
  bool is_active = 7;
  google.protobuf.Timestamp created_at = 8;
  google.protobuf.Timestamp last_login = 9;
  google.protobuf.Timestamp last_login_from = 10;
  string birthday = 11;
  string gender = 12;
  string picture = 13;
}

message  AccessToken {
  string access_token = 1;
  string refresh_token = 2;
  int64  exp = 3;
}

message RegisterSchema {
  string lastname = 1;
  string firstname = 2;
  string email = 3;
  string phone_number = 4;
  string password = 5;
}

message UpdateUserSchema {
  string lastname = 1;
  string firstname = 2;
  string gender = 3;
  string birthday = 4;
  bytes picture = 5;
}

message EmailSchema{
  string email  = 1;
}
message EmailCodeSchema {
  string email  = 1;
  string code  = 2;
}
message EmailPasswordSchema {
  string email = 1;
  string password = 2;
}

message EmailMailSchema {
  string email  = 1;
  uint32 action  = 2;
}

message PhoneCodeSchema {
  string phone = 1;
  string code = 2;
}
message PhoneSchema {
  string phone  = 1;
}

message PhoneSMSSchema {
  string phone  = 1;
  uint32 action  = 2;
}

message PasswordSchema {
  string password = 1;
}

message TimeoutSchema {
  int64 timeout = 1;
}

message LogoutSchema {
  bool blackout = 1;
}

